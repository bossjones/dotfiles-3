#!/usr/bin/env python
# encoding: utf-8

import Queue
import httplib
import logging
import os
import threading


class Error(Exception):
    pass


class Dotfile(object):

    def __init__(self, name, mode=0600, directory_mode=0700):
        self.name = name
        self.mode = mode
        self.directory_mode = 0700

    def __str__(self):
        return self.name

    def __repr__(self):
        return repr(self.name)

    @property
    def path(self):
        return os.path.expanduser('~/%s' % self.name)

    @property
    def directory(self):
        return os.path.dirname(self.path)

    @property
    def url_host(self):
        return 'raw.github.com'

    @property
    def url_path(self):
        return '/silas/config/master/src/%s' % self.name

    @property
    def url(self):
        return 'https://' + self.url_host + self.url_path

    def fetch(self):
        c = httplib.HTTPSConnection(self.url_host)
        c.request('GET', self.url_path)
        res = c.getresponse()
        if res.status != 200:
            raise Error('failed to get %s (%s)' % (self.url, res.status))
        return res.read()


    def save(self):
        data = self.fetch()
        if not os.path.isdir(self.directory):
            os.makedirs(self.directory, self.directory_mode)
        with open(self.path, 'w+', self.mode) as f:
            f.write(data)


class Dotfiles(object):

    def __init__(self):
        self.q = Queue.Queue()
        self.files = []

    def add(self, *args, **kwargs):
        self.files.append(Dotfile(*args, **kwargs))

    def run(self):
        while True:
            try:
                dotfile = self.q.get()
                logging.info('dotfile %r saving', dotfile)
                dotfile.save()
            except Exception as e:
                logging.error('dotfile %r error: %s', dotfile, e.message)
            finally:
                self.q.task_done()

    def start(self, num=5):
        for _ in xrange(num):
            t = threading.Thread(target=self.run)
            t.daemon = True
            t.start()

        for d in self.files:
            self.q.put(d)

        return self

    def join(self):
        self.q.join()
        return self


def main():
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                        level=logging.INFO)

    df = Dotfiles()
    df.add('.bashrc')
    df.add('.gdbinit')
    df.add('.gemrc')
    df.add('.screen/rock')
    df.add('.screenrc')
    df.add('.ssh/config')
    df.start().join()


if __name__ == '__main__':
    main()
