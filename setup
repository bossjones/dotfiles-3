#!/usr/bin/env python
# encoding: utf-8

import Queue
import httplib
import logging
import os
import threading


class Dotfiles(object):

    def __init__(self):
        self.q = Queue.Queue()
        self.files = [
            '.bashrc',
            '.gdbinit',
            '.gemrc',
            '.screenrc',
            '.screen/rock',
        ]

    def get(self, path):
        host = 'raw.github.com'
        full_path = '/silas/config/master/src/%s' % path

        c = httplib.HTTPSConnection(host)
        c.request('GET', full_path)
        res = c.getresponse()
        if res.status != 200:
            raise Exception('failed to get https://%s%s (%s)' % (host,
                full_path, res.status))
        return res.read()

    def run(self):
        while True:
            try:
                name = self.q.get()
                logging.info('dotfile %s getting', name)
                data = self.get(name)
                if data is not None:
                    logging.info('dotfile %s writing', name)
                    file_path = os.path.expanduser('~/%s' % name)
                    dir_path = os.path.join(*os.path.split(file_path)[:-1])
                    if not os.path.isdir(dir_path):
                        os.makedirs(dir_path, 0700)
                    with open(file_path, 'w+') as f:
                        f.write(data)
            except Exception as e:
                logging.error('dotfile %s error: %s', name, e.message)
            finally:
                self.q.task_done()

    def start(self, num=5):
        for _ in xrange(num):
            t = threading.Thread(target=self.run)
            t.daemon = True
            t.start()

        for d in self.files:
            self.q.put(d)

        return self

    def join(self):
        self.q.join()
        return self


def main():
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                        level=logging.INFO)

    Dotfiles().start().join()


if __name__ == '__main__':
    main()
