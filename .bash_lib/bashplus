#!/usr/bin/env bash

backup() {
  code=0

  for src_path in $@; do
    dst_path="${BACKUP_PATH-$HOME/Backups}"
    src_name="$( basename $src_path )"
    dst_name="$( date +%Y-%m-%d )-$( basename $src_path )"
    
    if [[ ! -d "$src_path" ]]; then
      echo "Invalid source path: $src_path" 1>&2
      code=2; break
    fi
    
    if [[ ! -d "$dst_path" ]]; then
      echo "Invalid destination path: $dst_path" 1>&2
      code=2; break
    fi
    
    if ! pushd "$( dirname $src_path )" > /dev/null; then
      code=2; break
    fi
    
    if [[ -e "$dst_name" ]]; then
      echo "Desination name already exists: $dst_name" 1>&2
      code=2; break
    fi
    
    if [[ -e "$dst_path/$dst_name.tar.bz2" ]]; then
      echo "Desination path already exists: $dst_path" 1>&2
      code=2; break
    fi
    
    if ! (mv "$src_name" "$dst_name" && \
          tar cjf "$dst_name.tar.bz2" "$dst_name" && \
          mv "$dst_name.tar.bz2" "$dst_path" && \
          mv "$dst_name" "$src_name" &&
          popd > /dev/null
        ); then
      code=2; break
    fi
  done

  return $code
}

backup-drop() {
  code=0

  for path in $@; do
    if backup "$path"; then
      rm -fr "$path"
    else
      code=2; break
    fi
  done

  return $code
}

command-exists() {
  type -f "$1" &> /dev/null
}

grow-path() {
  name="$1"
  path_list="${!name}"
  path="$2"
  prepend="$3"

  if [[ $path_list == "" ]]; then
    export $name="$path"
  elif [[ $path_list != $path && $path_list != $path:* && $path_list != *:$path:* && $path_list != *:$path ]]; then
    if [[ -n $prepend ]]; then
      export $name="$path:$path_list"
    else
      export $name="$path_list:$path"
    fi
  fi
}

extract() {
  for path in $@; do
    if [ -f "$path" ] ; then
      case "$path" in
        *.tar.bz2) tar xvjf "$path" ;;
        *.tar.gz)  tar xvzf "$path" ;;
        *.bz2)     bunzip2 "$path" ;;
        *.rar)     unrar x "$path" ;;
        *.rpm)     rpm2cpio "$path" | cpio -idmv ;;
        *.gz)      gunzip "$path" ;;
        *.tar)     tar xvf "$path" ;;
        *.tbz2)    tar xvjf "$path" ;;
        *.tgz)     tar xvzf "$path" ;;
        *.zip)     unzip "$path" ;;
        *.egg)     unzip "$path" ;;
        *.Z)       uncompress "$path" ;;
        *.7z)      7z x "$path" ;;
        *)         echo "'$path' cannot be extracted via >extract<" ;;
      esac
    else
      echo "'$path' is not a valid file"
    fi
  done
}

note() {
  case "$1" in
    "-d")
      shift
      libnote-delete $@
      ;;
    "-e")
      shift
      libnote-edit $@
      ;;
    "-h")
      echo "Usage: note [option] [NAME]"
      echo
      echo "Options:"
      echo "  -h       display help message"
      echo "  -d NAME  delete note"
      echo "  -e NAME  edit note"
      echo "  -p NAME  print note"
      ;;
    "-l")
      ls "${NOTE_PATH-$HOME/.notes}"
      ;;
    "-p")
      shift
      libnote-print $@
      ;;
    -[[:digit:]]*)
      libnote-edit "$( date --date="${1:1} day ago" +%Y-%m-%d )"
      ;;
    *)
      libnote-edit $@
      ;;
  esac
}

libnote-delete() {
  if [ -n "$*" ]; then
    rm -f "${NOTE_PATH-$HOME/.notes}/$*" &> /dev/null || \
      echo "Note doesn't exist." >&2
  else
    echo "Note name required." >&2
  fi
}

libnote-edit() {
  if [ -n "$*" ]; then
    $EDITOR "${NOTE_PATH-$HOME/.notes}/$*"
  else
    $EDITOR "${NOTE_PATH-$HOME/.notes}/$( date +%Y-%m-%d )"
  fi
}

libnote-print() {
  if [ -n "$*" ]; then
    cat "$HOME/.notes/$*" 2> /dev/null || \
      echo "Note doesn't exist." >&2
  else
    echo "Note name required."
  fi
}
